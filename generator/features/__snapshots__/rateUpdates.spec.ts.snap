// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`feature: rateUpdatesV3 > should properly generate files 1`] = `
{
  "jsonConfig": "import {ConfigFile} from '../../generator/types';
export const config: ConfigFile = {
  rootOptions: {
    pools: ['AaveV3Ethereum'],
    title: 'test',
    shortName: 'Test',
    date: '20231023',
    author: 'test',
    discussion: 'test',
  },
  poolOptions: {
    AaveV3Ethereum: {
      configs: {
        RATE_UPDATE_V3: [
          {
            asset: 'WETH',
            params: {
              optimalUtilizationRate: '',
              baseVariableBorrowRate: '6',
              variableRateSlope1: '',
              variableRateSlope2: '',
            },
          },
          {
            asset: 'DAI',
            params: {
              optimalUtilizationRate: '',
              baseVariableBorrowRate: '4',
              variableRateSlope1: '10',
              variableRateSlope2: '',
            },
          },
          {
            asset: 'USDC',
            params: {
              optimalUtilizationRate: '',
              baseVariableBorrowRate: '4',
              variableRateSlope1: '10',
              variableRateSlope2: '',
            },
          },
          {
            asset: 'USDT',
            params: {
              optimalUtilizationRate: '',
              baseVariableBorrowRate: '6',
              variableRateSlope1: '10',
              variableRateSlope2: '',
            },
          },
          {
            asset: 'WBTC',
            params: {
              optimalUtilizationRate: '',
              baseVariableBorrowRate: '5',
              variableRateSlope1: '',
              variableRateSlope2: '',
            },
          },
        ],
      },
      cache: {blockNumber: 42},
    },
  },
};
",
  "payloads": [
    {
      "contractName": "AaveV3Ethereum_Test_20231023",
      "payload": "// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import {AaveV3EthereumAssets} from 'aave-address-book/AaveV3Ethereum.sol';
import {RiskStewardsEthereum} from '../../../../scripts/networks/RiskStewardsEthereum.s.sol';
import {EngineFlags} from 'aave-v3-origin/src/contracts/extensions/v3-config-engine/EngineFlags.sol';
import {IAaveV3ConfigEngine} from 'aave-v3-origin/src/contracts/extensions/v3-config-engine/IAaveV3ConfigEngine.sol';

/**
 * @title test
 * @author test
 * - discussion: test
 * - deploy-command: make run-script contract=src/contracts/updates/20231023_AaveV3Ethereum_Test/AaveV3Ethereum_Test_20231023.sol:AaveV3Ethereum_Test_20231023 network=mainnet broadcast=false generate_diff=true skip_timelock=false
 */
contract AaveV3Ethereum_Test_20231023 is RiskStewardsEthereum {
  function name() public pure override returns (string memory) {
    return 'AaveV3Ethereum_Test_20231023';
  }

  function rateStrategiesUpdates()
    public
    pure
    override
    returns (IAaveV3ConfigEngine.RateStrategyUpdate[] memory)
  {
    IAaveV3ConfigEngine.RateStrategyUpdate[]
      memory rateStrategies = new IAaveV3ConfigEngine.RateStrategyUpdate[](5);
    rateStrategies[0] = IAaveV3ConfigEngine.RateStrategyUpdate({
      asset: AaveV3EthereumAssets.WETH_UNDERLYING,
      params: IAaveV3ConfigEngine.InterestRateInputData({
        optimalUsageRatio: EngineFlags.KEEP_CURRENT,
        baseVariableBorrowRate: 6_00,
        variableRateSlope1: EngineFlags.KEEP_CURRENT,
        variableRateSlope2: EngineFlags.KEEP_CURRENT
      })
    });
    rateStrategies[1] = IAaveV3ConfigEngine.RateStrategyUpdate({
      asset: AaveV3EthereumAssets.DAI_UNDERLYING,
      params: IAaveV3ConfigEngine.InterestRateInputData({
        optimalUsageRatio: EngineFlags.KEEP_CURRENT,
        baseVariableBorrowRate: 4_00,
        variableRateSlope1: 10_00,
        variableRateSlope2: EngineFlags.KEEP_CURRENT
      })
    });
    rateStrategies[2] = IAaveV3ConfigEngine.RateStrategyUpdate({
      asset: AaveV3EthereumAssets.USDC_UNDERLYING,
      params: IAaveV3ConfigEngine.InterestRateInputData({
        optimalUsageRatio: EngineFlags.KEEP_CURRENT,
        baseVariableBorrowRate: 4_00,
        variableRateSlope1: 10_00,
        variableRateSlope2: EngineFlags.KEEP_CURRENT
      })
    });
    rateStrategies[3] = IAaveV3ConfigEngine.RateStrategyUpdate({
      asset: AaveV3EthereumAssets.USDT_UNDERLYING,
      params: IAaveV3ConfigEngine.InterestRateInputData({
        optimalUsageRatio: EngineFlags.KEEP_CURRENT,
        baseVariableBorrowRate: 6_00,
        variableRateSlope1: 10_00,
        variableRateSlope2: EngineFlags.KEEP_CURRENT
      })
    });
    rateStrategies[4] = IAaveV3ConfigEngine.RateStrategyUpdate({
      asset: AaveV3EthereumAssets.WBTC_UNDERLYING,
      params: IAaveV3ConfigEngine.InterestRateInputData({
        optimalUsageRatio: EngineFlags.KEEP_CURRENT,
        baseVariableBorrowRate: 5_00,
        variableRateSlope1: EngineFlags.KEEP_CURRENT,
        variableRateSlope2: EngineFlags.KEEP_CURRENT
      })
    });

    return rateStrategies;
  }
}
",
      "pool": "AaveV3Ethereum",
    },
  ],
}
`;

exports[`feature: rateUpdatesV3 > should return reasonable code 1`] = `
{
  "code": {
    "fn": [
      "function rateStrategiesUpdates()
          public
          pure
          override
          returns (IAaveV3ConfigEngine.RateStrategyUpdate[] memory)
        {
          IAaveV3ConfigEngine.RateStrategyUpdate[] memory rateStrategies = new IAaveV3ConfigEngine.RateStrategyUpdate[](5);
          rateStrategies[0] = IAaveV3ConfigEngine.RateStrategyUpdate({
                  asset: AaveV3EthereumAssets.WETH_UNDERLYING,
                  params: IAaveV3ConfigEngine.InterestRateInputData({
                    optimalUsageRatio: EngineFlags.KEEP_CURRENT,
                    baseVariableBorrowRate: 6_00,
                    variableRateSlope1: EngineFlags.KEEP_CURRENT,
                    variableRateSlope2: EngineFlags.KEEP_CURRENT
                  })
                });
rateStrategies[1] = IAaveV3ConfigEngine.RateStrategyUpdate({
                  asset: AaveV3EthereumAssets.DAI_UNDERLYING,
                  params: IAaveV3ConfigEngine.InterestRateInputData({
                    optimalUsageRatio: EngineFlags.KEEP_CURRENT,
                    baseVariableBorrowRate: 4_00,
                    variableRateSlope1: 10_00,
                    variableRateSlope2: EngineFlags.KEEP_CURRENT
                  })
                });
rateStrategies[2] = IAaveV3ConfigEngine.RateStrategyUpdate({
                  asset: AaveV3EthereumAssets.USDC_UNDERLYING,
                  params: IAaveV3ConfigEngine.InterestRateInputData({
                    optimalUsageRatio: EngineFlags.KEEP_CURRENT,
                    baseVariableBorrowRate: 4_00,
                    variableRateSlope1: 10_00,
                    variableRateSlope2: EngineFlags.KEEP_CURRENT
                  })
                });
rateStrategies[3] = IAaveV3ConfigEngine.RateStrategyUpdate({
                  asset: AaveV3EthereumAssets.USDT_UNDERLYING,
                  params: IAaveV3ConfigEngine.InterestRateInputData({
                    optimalUsageRatio: EngineFlags.KEEP_CURRENT,
                    baseVariableBorrowRate: 6_00,
                    variableRateSlope1: 10_00,
                    variableRateSlope2: EngineFlags.KEEP_CURRENT
                  })
                });
rateStrategies[4] = IAaveV3ConfigEngine.RateStrategyUpdate({
                  asset: AaveV3EthereumAssets.WBTC_UNDERLYING,
                  params: IAaveV3ConfigEngine.InterestRateInputData({
                    optimalUsageRatio: EngineFlags.KEEP_CURRENT,
                    baseVariableBorrowRate: 5_00,
                    variableRateSlope1: EngineFlags.KEEP_CURRENT,
                    variableRateSlope2: EngineFlags.KEEP_CURRENT
                  })
                });


          return rateStrategies;
        }",
    ],
  },
}
`;
